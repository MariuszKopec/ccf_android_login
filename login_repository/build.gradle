buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'me.tatarka:gradle-retrolambda:3.2.3'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

def APP_VERSION = getVersion(file('version.properties'))

version = APP_VERSION
group = rootProject.ext.application_group

install {
    repositories.mavenInstaller {
        pom.project {
            name project.name
            url rootProject.ext.website
            inceptionYear '2016'
            packaging rootProject.ext.website
            groupId rootProject.ext.application_group
            artifactId project.name
            version APP_VERSION

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            scm {
                connection rootProject.ext.website
                url rootProject.ext.version_control_source
            }
            developers {
                developer {
                    name 'Mariusz'
                }
            }
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USERNAME')
    key = System.getenv('BINTRAY_API_KEY')
    configurations = ['archives']
    pkg {
        repo = rootProject.ext.repository
        name = project.name
        websiteUrl = rootProject.ext.website
        issueTrackerUrl = rootProject.ext.website
        vcsUrl = rootProject.ext.version_control_source
        licenses = ['Apache-2.0']
        labels = ['aar', 'android']
        publicDownloadNumbers = true
        publish = true
    }
}

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

    defaultConfig {
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")

        versionCode globalConfiguration.getAt("androidVersionCode")
        versionName globalConfiguration.getAt("androidVersionName")
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage'  // Some libraries have issues with this
        disable 'OldTargetApi'    // Due to Robolectric that modifies the manifest when running tests
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'APK META-INF/notice.txt'
    }
}

dependencies {
    def logicDependencies = rootProject.ext.logicDependencies
    def androidDependencies = rootProject.ext.androidDependencies

    compile('com.octo.android.robospice:robospice-spring-android:1.4.14') {
        exclude group: 'org.apache.commons', module: 'commons-io'
    }
    compile logicDependencies.loginLogic
    compile logicDependencies.baseLogic
    compile androidDependencies.rxAndroid
}

apt {
    arguments {
        androidManifestFile variant.outputs[0].processResources.manifestFile
        applicationId android.defaultConfig.applicationId
    }
}